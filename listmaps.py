# listmaps.py is a plugin for minqlx to:
# -Build a list of maps that are loaded on the server installation.
# -This works for the server installation. The server instances that are running share the downloaded maps.
# -For this reason, I did not make this script work differently for each running server.
# -The generated maplist is saved in the server's install directory, typically ./qlds
# created by BarelyMiSSeD on 5-13-16
#
"""
Set these cvars in your server.cfg (or wherever you set your minqlx variables).:
qlx_listmapsAdmin "4" - Sets the minqlx server permisson level needed to admin the listmaps script (to use !getmaps).
qlx_listmapsUser "0" - Permission level needed to use !listmaps, which show the user the map list generated by the !getmaps command.
"""

import minqlx
import requests

VERSION = "v1.03"
FILE_NAME = 'server_map_list.txt'
_map_buffer = ""
_map_redirection = None

class listmaps(minqlx.Plugin):
    def __init__(self):
        # Cvars.
        self.set_cvar_once("qlx_listmapsAdmin", "4")
        self.set_cvar_once("qlx_listmapsUser", "0")
        
        # Minqlx Hooks
        self.add_hook("console_print", self.handle_console_print)
        self.add_hook("player_loaded", self.player_loaded)
        
        # Minqlx server commands
        self.add_command("getmaps", self.get_maps, int(self.get_cvar("qlx_listmapsAdmin")))
        self.add_command(("listmaps", "listmap"), self.cmd_list_maps, int(self.get_cvar("qlx_listmapsUser")), usage="|search string|")
        self.add_command(("listmapsversion", "listmaps_version"), self.listmaps_version, int(self.get_cvar("qlx_listmapsAdmin")))

    # listmaps.py version checker. Thanks to iouonegirl for most of this section's code.
    @minqlx.thread
    def check_version(self, player=None, channel=None):
        url = "https://raw.githubusercontent.com/barelymissed/minqlx-plugins/master/{}.py".format(self.__class__.__name__)
        res = requests.get(url)
        if res.status_code != requests.codes.ok:
            return
        for line in res.iter_lines():
            if line.startswith(b'VERSION'):
                line = line.replace(b'VERSION = ', b'')
                line = line.replace(b'"', b'')
                # If called manually and outdated
                if channel and VERSION.encode() != line:
                    channel.reply("^4Server: ^7Currently using  ^4BarelyMiSSeD^7's ^6{}^7 plugin ^1outdated^7 version ^6{}^7. The latest version is ^6{}".format(self.__class__.__name__, VERSION, line.decode()))
                    channel.reply("^4Server: ^7See ^3https://github.com/BarelyMiSSeD/minqlx-plugins")
                # If called manually and alright
                elif channel and VERSION.encode() == line:
                    channel.reply("^4Server: ^7Currently using ^4BarelyMiSSeD^7's  latest ^6{}^7 plugin version ^6{}^7.".format(self.__class__.__name__, VERSION))
                    channel.reply("^4Server: ^7See ^3https://github.com/BarelyMiSSeD/minqlx-plugins")
                # If routine check and it's not alright.
                elif player and VERSION.encode() != line:
                    try:
                        player.tell("^4Server: ^3Plugin update alert^7:^6 {}^7's latest version is ^6{}^7 and you're using ^6{}^7!".format(self.__class__.__name__, line.decode(), VERSION))
                        player.tell("^4Server: ^7See ^3https://github.com/BarelyMiSSeD/minqlx-plugins")
                    except Exception as e: minqlx.console_command("echo {}".format(e))
                return

    def listmaps_version(self, player, msg, channel):
        self.check_version(channel=channel)

    # Server Owner Join version checker.
    @minqlx.delay(4)
    def player_loaded(self, player):
        if player.steam_id == minqlx.owner():
            self.check_version(player=player)

    def handle_console_print(self, text):
        """Called whenever the server prints something to the console."""
        try:
            if not text:
                return

            if _map_redirection:
                global _map_buffer
                if '.bsp' in text:
                    _map_buffer += text

        except:
            minqlx.log_exception()
            return True

    def cmd_list_maps(self, player, msg, channel):
        maps = "^1MAPS: These are the map designations, not always the map name. Use these in a callvote.^7\n"
        f = open(FILE_NAME, 'r')
        lines = f.readlines()
        f.close()
        lines.sort()
        if len(msg) < 2:
            for line in lines:
                line = line.split(".")
                addMap = line[0]
                mapLine = maps.split("\n")[-1]
                maps += self.line_up(mapLine, addMap)
        else:
            search = msg[1]
            for line in lines:
                line = line.split(".")
                addMap = line[0]
                if search in addMap:
                    mapLine = maps.split("\n")[-1]
                    maps += self.line_up(mapLine, addMap)
                
        if maps.endswith("\n"):
            maps += "^1MAPS: These are the map designations, not always the map name. Use these in a callvote."
        else:
            maps += "\n^1MAPS: These are the map designations, not always the map name. Use these in a callvote."
        player.tell(maps)

    def line_up(self, mapLine, addMap):
        length = len(mapLine)
        if length == 0:
            append = addMap
        elif length < 15:
            append = " " * (15 - length) + addMap
        elif length < 30:
            append = " " * (30 - length) + addMap
        elif length < 45:
            append = " " * (45 - length) + addMap
        elif length < 60:
            append = " " * (60 - length) + addMap
        elif length < 75:
            append = " " * (75 - length) + addMap
        else:
            append = "\n" + addMap
        return append

    def get_maps(self, player, msg, channel):
        with self.gather_maps(player):
            minqlx.console_command("dir maps")

        player.tell("^4Server^7: The server maps have been stored in the file ^3{}^7.".format(FILE_NAME))

    def gather_maps(self, player):

        class Redirector:
            def __init__(self, player):
                self.player = player

            def __enter__(self):
                global _map_redirection
                _map_redirection = self.player

            def __exit__(self, exc_type, exc_val, exc_tb):
                global _map_redirection, _map_buffer
                f = open(FILE_NAME, "w")
                f.write(str(_map_buffer))
                f.close()
                _map_redirection = None
                _map_buffer = ""

        return Redirector(player)
